"""
Classe Base para Extratores de Samples de √Åudio
"""

import logging
import subprocess
import json
from abc import ABC, abstractmethod
from pathlib import Path
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

class BaseSampleExtractor(ABC):
    """Classe base para extratores de samples de √°udio"""
    
    def __init__(self, output_dir: str = "static/speaker_samples"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
    @abstractmethod
    def extract_sample(self, source: str, **kwargs) -> Path:
        """Extrai sample de √°udio da fonte especificada"""
        pass
    
    def check_dependencies(self) -> bool:
        """Verifica se as depend√™ncias necess√°rias est√£o dispon√≠veis"""
        return self._check_ffmpeg()
    
    def _check_ffmpeg(self) -> bool:
        """Verifica se ffmpeg est√° dispon√≠vel"""
        try:
            result = subprocess.run(['ffmpeg', '-version'], 
                                  capture_output=True, text=True, check=True)
            version_line = result.stdout.split('\n')[0]
            logger.info(f"ffmpeg dispon√≠vel: {version_line}")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            logger.error("ffmpeg n√£o encontrado!")
            return False
    
    def get_audio_info(self, audio_file: Path) -> Dict[str, Any]:
        """Obt√©m informa√ß√µes detalhadas do arquivo de √°udio"""
        try:
            cmd = [
                'ffprobe',
                '-v', 'quiet',
                '-print_format', 'json',
                '-show_streams',
                '-show_format',
                str(audio_file)
            ]
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            data = json.loads(result.stdout)
            
            # Extrair informa√ß√µes principais
            stream = data['streams'][0]
            format_info = data['format']
            
            return {
                'duration': float(format_info.get('duration', 0)),
                'sample_rate': int(stream.get('sample_rate', 0)),
                'channels': int(stream.get('channels', 0)),
                'codec': stream.get('codec_name', 'unknown'),
                'bit_rate': int(stream.get('bit_rate', 0)),
                'size': int(format_info.get('size', 0))
            }
        except Exception as e:
            logger.error(f"Erro ao obter informa√ß√µes do √°udio: {e}")
            return {}
    
    def validate_for_coqui(self, wav_file: Path) -> bool:
        """Valida se o WAV est√° adequado para CoquiTTS"""
        try:
            info = self.get_audio_info(wav_file)
            
            sample_rate = info.get('sample_rate', 0)
            channels = info.get('channels', 0)
            duration = info.get('duration', 0)
            
            logger.info(f"Valida√ß√£o CoquiTTS - {wav_file.name}:")
            logger.info(f"  Sample Rate: {sample_rate}Hz {'‚úÖ' if sample_rate == 24000 else '‚ö†Ô∏è'}")
            logger.info(f"  Canais: {channels} {'‚úÖ' if channels == 1 else '‚ö†Ô∏è'}")
            logger.info(f"  Dura√ß√£o: {duration:.1f}s {'‚úÖ' if 3 <= duration <= 60 else '‚ö†Ô∏è'}")
            
            # Crit√©rios para CoquiTTS
            is_valid = (
                sample_rate in [22050, 24000, 44100] and  # Sample rates aceitos
                channels == 1 and  # Mono
                3 <= duration <= 60  # Dura√ß√£o adequada
            )
            
            if is_valid:
                logger.info("  ‚úÖ Formato adequado para CoquiTTS!")
            else:
                logger.warning("  ‚ö†Ô∏è Formato pode n√£o ser ideal para CoquiTTS")
                
            return is_valid
                
        except Exception as e:
            logger.error(f"Erro na valida√ß√£o: {e}")
            return False
    
    def list_samples(self) -> None:
        """Lista samples dispon√≠veis no diret√≥rio de sa√≠da"""
        samples = list(self.output_dir.glob("*.wav"))
        
        if not samples:
            logger.info(f"Nenhum sample encontrado em {self.output_dir}/")
            return
        
        logger.info(f"Samples dispon√≠veis em {self.output_dir}:")
        for sample in sorted(samples):
            info = self.get_audio_info(sample)
            size_kb = sample.stat().st_size / 1024
            duration = info.get('duration', 0)
            sample_rate = info.get('sample_rate', 0)
            
            logger.info(f"  üéµ {sample.name}")
            logger.info(f"     Tamanho: {size_kb:.1f}KB | Dura√ß√£o: {duration:.1f}s | Sample Rate: {sample_rate}Hz")
    
    def optimize_for_coqui(self, input_file: Path, output_file: Optional[Path] = None) -> Path:
        """Otimiza arquivo de √°udio para uso com CoquiTTS"""
        if output_file is None:
            output_file = self.output_dir / f"optimized_{input_file.name}"
        
        try:
            ffmpeg_cmd = [
                'ffmpeg',
                '-i', str(input_file),
                '-ar', '24000',  # 24kHz sample rate
                '-ac', '1',      # Mono
                '-c:a', 'pcm_f32le',  # Float32 PCM
                '-af', 'volume=0.8,highpass=f=80,lowpass=f=8000',  # Filtros de √°udio
                '-y',  # Sobrescrever se existir
                str(output_file)
            ]
            
            result = subprocess.run(ffmpeg_cmd, capture_output=True, text=True, check=True)
            
            if output_file.exists():
                logger.info(f"‚úÖ Arquivo otimizado: {output_file}")
                self.validate_for_coqui(output_file)
                return output_file
            else:
                raise RuntimeError("Falha ao criar arquivo otimizado")
                
        except subprocess.CalledProcessError as e:
            logger.error(f"Erro ao otimizar √°udio: {e}")
            if e.stderr:
                logger.error(f"stderr: {e.stderr}")
            raise
        except Exception as e:
            logger.error(f"Erro inesperado: {e}")
            raise 