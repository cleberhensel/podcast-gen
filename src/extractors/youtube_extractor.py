"""
YouTube Sample Extractor para CoquiTTS
Extrai samples de √°udio do YouTube otimizados para s√≠ntese TTS
"""

import logging
import subprocess
import tempfile
import re
from pathlib import Path
from typing import Optional

from .base_extractor import BaseSampleExtractor

logger = logging.getLogger(__name__)

class YouTubeSampleExtractor(BaseSampleExtractor):
    """Extrator de samples de √°udio do YouTube otimizado para CoquiTTS"""
    
    def __init__(self, output_dir: str = "static/speaker_samples"):
        super().__init__(output_dir)
        
    def check_dependencies(self) -> bool:
        """Verifica se yt-dlp e ffmpeg est√£o dispon√≠veis"""
        dependencies_ok = super().check_dependencies()
        
        # Verificar yt-dlp
        try:
            result = subprocess.run(['yt-dlp', '--version'], 
                                  capture_output=True, text=True, check=True)
            logger.info(f"yt-dlp dispon√≠vel: {result.stdout.strip()}")
            return dependencies_ok
        except (subprocess.CalledProcessError, FileNotFoundError):
            logger.error("yt-dlp n√£o encontrado! Instale com: pip install yt-dlp")
            return False
    
    def extract_video_id(self, url: str) -> str:
        """Extrai o ID do v√≠deo da URL do YouTube"""
        patterns = [
            r'(?:youtube\.com/watch\?v=|youtu\.be/|youtube\.com/embed/)([^&\n?#]+)',
            r'youtube\.com/watch.*?v=([^&\n?#]+)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                return match.group(1)
        
        raise ValueError(f"URL do YouTube inv√°lida: {url}")
    
    def extract_sample(self, source: str, start_time: int = 0, duration: int = 8, 
                      output_name: Optional[str] = None) -> Path:
        """
        Extrai sample de √°udio do YouTube
        
        Args:
            source: URL do v√≠deo do YouTube
            start_time: Tempo inicial em segundos
            duration: Dura√ß√£o do sample em segundos
            output_name: Nome do arquivo de sa√≠da (sem extens√£o)
            
        Returns:
            Path para o arquivo WAV criado
        """
        
        # Extrair ID do v√≠deo
        video_id = self.extract_video_id(source)
        
        # Nome de sa√≠da autom√°tico se n√£o fornecido
        if not output_name:
            output_name = f"youtube_{video_id}_{start_time}s"
        
        output_file = self.output_dir / f"{output_name}.wav"
        
        logger.info(f"üéØ Processando: {source}")
        logger.info(f"üìπ ID do v√≠deo: {video_id}")
        logger.info(f"‚è∞ In√≠cio: {start_time}s, Dura√ß√£o: {duration}s")
        logger.info(f"üíæ Sa√≠da: {output_file}")
        
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_audio = Path(temp_dir) / f"temp_audio.%(ext)s"
            
            try:
                # Passo 1: Baixar √°udio com yt-dlp
                logger.info("üì• Baixando √°udio...")
                self._download_audio(source, temp_audio)
                
                # Encontrar arquivo baixado
                downloaded_file = self._find_downloaded_file(temp_dir)
                
                # Passo 2: Extrair segmento e otimizar para CoquiTTS
                logger.info(f"‚úÇÔ∏è Extraindo segmento ({start_time}s - {start_time + duration}s)...")
                self._extract_and_optimize_segment(
                    downloaded_file, output_file, start_time, duration
                )
                
                # Validar resultado
                if not output_file.exists():
                    raise RuntimeError("Falha ao criar arquivo de sa√≠da")
                
                # Informa√ß√µes do arquivo criado
                info = self.get_audio_info(output_file)
                file_size = output_file.stat().st_size
                
                logger.info(f"‚úÖ Sample extra√≠do com sucesso!")
                logger.info(f"  üìè Tamanho: {file_size / 1024:.1f} KB")
                logger.info(f"  ‚è±Ô∏è Dura√ß√£o: {info.get('duration', 0):.1f}s")
                logger.info(f"  üìä Sample Rate: {info.get('sample_rate', 0)}Hz")
                
                # Validar para CoquiTTS
                self.validate_for_coqui(output_file)
                
                return output_file
                
            except Exception as e:
                logger.error(f"‚ùå Erro na extra√ß√£o: {e}")
                raise
    
    def _download_audio(self, url: str, temp_audio: Path) -> None:
        """Baixa √°udio do YouTube usando yt-dlp"""
        yt_dlp_cmd = [
            'yt-dlp',
            '--extract-audio',
            '--audio-format', 'wav',
            '--audio-quality', '0',  # Melhor qualidade
            '--no-playlist',
            '--output', str(temp_audio),
            url
        ]
        
        result = subprocess.run(yt_dlp_cmd, capture_output=True, text=True, check=True)
        logger.debug(f"yt-dlp output: {result.stdout}")
    
    def _find_downloaded_file(self, temp_dir: str) -> Path:
        """Encontra o arquivo baixado no diret√≥rio tempor√°rio"""
        temp_path = Path(temp_dir)
        
        # Procurar arquivo baixado
        for pattern in ["temp_audio.*", "*.wav", "*.mp3", "*.m4a"]:
            files = list(temp_path.glob(pattern))
            if files:
                downloaded_file = files[0]
                logger.debug(f"Arquivo baixado encontrado: {downloaded_file}")
                return downloaded_file
        
        raise RuntimeError("Arquivo de √°udio baixado n√£o encontrado")
    
    def _extract_and_optimize_segment(self, input_file: Path, output_file: Path,
                                    start_time: int, duration: int) -> None:
        """Extrai segmento e otimiza para CoquiTTS"""
        ffmpeg_cmd = [
            'ffmpeg',
            '-i', str(input_file),
            '-ss', str(start_time),  # Tempo inicial
            '-t', str(duration),     # Dura√ß√£o
            '-ar', '24000',          # 24kHz sample rate para CoquiTTS
            '-ac', '1',              # Mono
            '-c:a', 'pcm_f32le',     # Float32 PCM
            '-af', 'volume=0.8,highpass=f=80,lowpass=f=8000',  # Filtros de √°udio
            '-y',  # Sobrescrever se existir
            str(output_file)
        ]
        
        result = subprocess.run(ffmpeg_cmd, capture_output=True, text=True, check=True)
        logger.debug(f"ffmpeg output: {result.stderr}")
    
    def extract_multiple_samples(self, url: str, segments: list) -> list:
        """
        Extrai m√∫ltiplos samples de um mesmo v√≠deo
        
        Args:
            url: URL do v√≠deo do YouTube
            segments: Lista de dicts com 'start', 'duration', 'name'
            
        Returns:
            Lista de Paths para os arquivos criados
        """
        video_id = self.extract_video_id(url)
        results = []
        
        logger.info(f"üéØ Extraindo {len(segments)} samples de: {video_id}")
        
        for i, segment in enumerate(segments, 1):
            try:
                start = segment['start']
                duration = segment.get('duration', 8)
                name = segment.get('name', f"{video_id}_segment_{i}")
                
                logger.info(f"üìù Segmento {i}/{len(segments)}: {name}")
                
                sample_file = self.extract_sample(url, start, duration, name)
                results.append(sample_file)
                
            except Exception as e:
                logger.error(f"‚ùå Erro no segmento {i}: {e}")
                continue
        
        logger.info(f"‚úÖ {len(results)}/{len(segments)} samples extra√≠dos com sucesso")
        return results
    
    def extract_speaker_voices(self, url: str, male_segments: list = None, 
                             female_segments: list = None) -> dict:
        """
        Extrai samples de vozes masculinas e femininas separadamente
        
        Args:
            url: URL do v√≠deo do YouTube
            male_segments: Lista de segmentos com voz masculina
            female_segments: Lista de segmentos com voz feminina
            
        Returns:
            Dict com {'male': [files], 'female': [files]}
        """
        results = {'male': [], 'female': []}
        
        if male_segments:
            logger.info("üó£Ô∏è Extraindo vozes masculinas...")
            for segment in male_segments:
                start_time = segment['start']
                default_name = f'voice_{start_time}s'
                segment['name'] = f"male_{segment.get('name', default_name)}"
            results['male'] = self.extract_multiple_samples(url, male_segments)
        
        if female_segments:
            logger.info("üó£Ô∏è Extraindo vozes femininas...")
            for segment in female_segments:
                start_time = segment['start']
                default_name = f'voice_{start_time}s'
                segment['name'] = f"female_{segment.get('name', default_name)}"
            results['female'] = self.extract_multiple_samples(url, female_segments)
        
        return results 